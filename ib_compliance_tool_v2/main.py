import os
import yaml
import json
import html
import getpass
from datetime import datetime
from src.linux_auditor import LinuxAuditor
from rich.console import Console
from rich.table import Table
from rich.align import Align
from rich.box import ROUNDED
from rich.panel import Panel

console = Console()

def load_rules(rules_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª –∏–∑ YAML —Ñ–∞–π–ª–∞"""
    with open(rules_file, 'r') as f:
        return yaml.safe_load(f)

def get_password():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è"""
    return getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")

def run_linux_audit(host, username, password, rules_file):
    """–ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ –¥–ª—è Linux —Ö–æ—Å—Ç–∞"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
    rules_data = load_rules(rules_file)
    rules = rules_data.get('rules', [])
    
    # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    auditor = LinuxAuditor(host, username, password)
    if not auditor.connect():
        return None
    
    results = []
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–∞–≤–∏–ª—É
    for rule in rules:
        rule_id = rule['id']
        rule_name = rule['name']
        rule_type = rule.get('type', 'text')
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –ø—Ä–∞–≤–∏–ª–∞
            output, error = auditor.execute_command(rule['check']['command'])
            
            # –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            expected = rule['check']['expect']
            status = "FAIL"
            actual_display = output
            
            if rule_type == 'numeric_max':
                # –ß–∏—Å–ª–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–Ω–µ –±–æ–ª–µ–µ" (<=)
                actual_value = extract_number(output)
                expected_value = extract_number(expected)
                
                if actual_value is not None and expected_value is not None:
                    status = "PASS" if actual_value <= expected_value else "FAIL"
                    actual_display = f"{actual_value} (<= {expected_value})"
                else:
                    status = "ERROR"
                    actual_display = f"Failed to extract numbers: {output}"
                    
            elif rule_type == 'numeric_min':
                # –ß–∏—Å–ª–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–Ω–µ –º–µ–Ω–µ–µ" (>=)
                actual_value = extract_number(output)
                expected_value = extract_number(expected)
                
                if actual_value is not None and expected_value is not None:
                    status = "PASS" if actual_value >= expected_value else "FAIL"
                    actual_display = f"{actual_value} (>= {expected_value})"
                else:
                    status = "ERROR"
                    actual_display = f"Failed to extract numbers: {output}"
                    
            elif rule_type == 'numeric_equals':
                # –¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (==)
                actual_value = extract_number(output)
                expected_value = extract_number(expected)
                
                if actual_value is not None and expected_value is not None:
                    status = "PASS" if actual_value == expected_value else "FAIL"
                    actual_display = f"{actual_value} (== {expected_value})"
                else:
                    status = "ERROR"
                    actual_display = f"Failed to extract numbers: {output}"
                    
            elif rule_type == 'contains':
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
                status = "PASS" if expected in output else "FAIL"
                actual_display = output
                
            elif rule_type == 'not_contains':
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
                status = "PASS" if expected not in output else "FAIL"
                actual_display = output
                
            elif rule_type == 'text':
                # –¢–æ—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                status = "PASS" if output.strip() == expected.strip() else "FAIL"
                actual_display = output
                
            elif rule_type == 'contains_multiple':
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–¥—Å—Ç—Ä–æ–∫
                all_found = all(substring in output for substring in expected.split())
                status = "PASS" if all_found else "FAIL"
                actual_display = output
                
            elif rule_type == 'file_contains_lines':
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                expected_lines = expected.strip().split('\n')
                missing_lines = []
                for line in expected_lines:
                    if line.strip() and line.strip() not in output:
                        missing_lines.append(line.strip())
                
                status = "PASS" if not missing_lines else "FAIL"
                actual_display = f"Missing lines: {missing_lines}" if missing_lines else "All lines found"
                
            else:
                # –°—Ç–∞—Ä–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                status = "PASS" if expected in output else "FAIL"
                actual_display = output
            
            result = {
                'id': rule_id,
                'name': rule_name,
                'type': rule_type,
                'status': status,
                'expected': expected,
                'actual': output,
                'actual_display': actual_display,
                'error': error
            }
            
            results.append(result)
            
        except Exception as e:
            result = {
                'id': rule_id,
                'name': rule_name,
                'status': 'ERROR',
                'error': str(e)
            }
            results.append(result)
    
    auditor.disconnect()
    return results

def extract_number(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    import re
    numbers = re.findall(r'\d+', str(text))
    return int(numbers[0]) if numbers else None

def print_results_table(host, results):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    table = Table(title=f"Compliance Check Results for {host}")
    
    table.add_column("Rule ID", style="cyan")
    table.add_column("Name", style="magenta")
    table.add_column("Status", style="bold")
    table.add_column("Expected")
    table.add_column("Actual")
    
    for result in results:
        status_style = "green" if result['status'] == 'PASS' else "red"
        actual = result.get('actual_display', result.get('actual', 'N/A'))
        actual = (actual[:47] + "...") if len(str(actual)) > 50 else actual
        
        table.add_row(
            result['id'],
            result['name'],
            f"[{status_style}]{result['status']}[/{status_style}]",
            result.get('expected', 'N/A'),
            str(actual)
        )
    
    console.print(table)

def save_json_report(results, host):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ JSON —Ñ–∞–π–ª"""
    report = {
        'timestamp': datetime.now().isoformat(),
        'host': host,
        'results': results
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É reports –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    import os
    os.makedirs('reports', exist_ok=True)
    
    filename = f"reports/report_{host}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    console.print(f"[green]Report saved to {filename}[/green]")

def print_summary_statistics(all_results):
    """–í—ã–≤–æ–¥ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    console.print(f"\n[bold yellow]üìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê[/bold yellow]")
    console.print("=" * 50)
    
    total_hosts = len(all_results)
    completed = sum(1 for r in all_results if r['status'] == 'completed')
    failed = sum(1 for r in all_results if r['status'] == 'failed')
    errors = sum(1 for r in all_results if r['status'] == 'error')
    
    console.print(f"–í—Å–µ–≥–æ –º–∞—à–∏–Ω: {total_hosts}")
    console.print(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: [green]{completed}[/green]")
    console.print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: [yellow]{failed}[/yellow]")
    console.print(f"–û—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: [red]{errors}[/red]")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–∞–º –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
    if completed > 0:
        total_checks = sum(len(r['results']) for r in all_results if r['status'] == 'completed')
        total_passed = sum(r['summary']['passed'] for r in all_results if r['status'] == 'completed')
        total_failed = sum(r['summary']['failed'] for r in all_results if r['status'] == 'completed')
        
        console.print(f"\n[bold]–ü–æ –≤—Å–µ–º —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º:[/bold]")
        console.print(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}")
        console.print(f"–£—Å–ø–µ—à–Ω—ã—Ö: [green]{total_passed}[/green]")
        console.print(f"–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: [red]{total_failed}[/red]")
        success_rate = (total_passed / total_checks * 100) if total_checks > 0 else 0
        console.print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: [bold]{success_rate:.1f}%[/bold]")

def save_summary_report(all_results):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Å–µ–º –º–∞—à–∏–Ω–∞–º"""
    summary = {
        'timestamp': datetime.now().isoformat(),
        'summary': {
            'total_hosts': len(all_results),
            'completed': sum(1 for r in all_results if r['status'] == 'completed'),
            'failed': sum(1 for r in all_results if r['status'] == 'failed'),
            'errors': sum(1 for r in all_results if r['status'] == 'error')
        },
        'hosts': all_results
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É reports –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs('reports', exist_ok=True)
    
    json_filename = f"reports/summary_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(json_filename, 'w', encoding='utf-8') as f:
        json.dump(summary, f, indent=2, ensure_ascii=False)
    
    html_filename = save_html_report(all_results)
    
    console.print(f"[green]‚úì JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {json_filename}[/green]")
    console.print(f"[green]‚úì HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {html_filename}[/green]")

def print_banner():

    banner_text = """
     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù
    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù 
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó 
    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó
     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
    """
    
    panel = Panel(
        banner_text,
        title="[bold yellow]COMPLIANCE CHECK TOOL[/bold yellow]",
        subtitle="[italic]–ê–û '–ì–æ–∑–Ω–∞–∫'[/italic]",
        box=ROUNDED,
        border_style="blue",
        width=65,

    )
    aligned_panel = Align(panel, align="center", pad=10)
    console.print()
    console.print(aligned_panel)
    console.print()

def save_html_report(all_results):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ —Å collapsing sections"""
    import os
    os.makedirs('reports', exist_ok=True)
    
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    filename = f"reports/report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_hosts = len(all_results)
    completed = sum(1 for r in all_results if r['status'] == 'completed')
    failed = sum(1 for r in all_results if r['status'] == 'failed')
    errors = sum(1 for r in all_results if r['status'] == 'error')
    
    html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Compliance Report - GOZNAK</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 3px solid #2c5aa0;
            padding-bottom: 20px;
        }}
        .logo {{
            font-size: 32px;
            font-weight: bold;
            color: #2c5aa0;
            margin-bottom: 10px;
        }}
        .subtitle {{
            color: #666;
            font-style: italic;
        }}
        .summary {{
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            border-left: 4px solid #2c5aa0;
        }}
        .stats {{
            display: flex;
            justify-content: space-around;
            margin: 20px 0;
        }}
        .stat-item {{
            text-align: center;
            padding: 15px;
            border-radius: 8px;
            min-width: 120px;
        }}
        .stat-completed {{ background: #d4edda; color: #155724; }}
        .stat-failed {{ background: #f8d7da; color: #721c24; }}
        .stat-errors {{ background: #fff3cd; color: #856404; }}
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã—Ö —Å–µ–∫—Ü–∏–π */
        .collapsible {{
            background: #2c5aa0;
            color: white;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
            cursor: pointer;
            font-weight: bold;
        }}
        .collapsible:hover {{
            background: #1e3a8a;
        }}
        .collapsible-content {{
            display: none;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 5px;
            margin-bottom: 20px;
            border: 1px solid #ddd;
        }}
        .collapsible:after {{
            content: '‚ñº';
            float: right;
        }}
        .active:after {{
            content: '‚ñ≤';
        }}
        
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }}
        th, td {{
            padding: 12px;
            text-align: left;
            border: 1px solid #ddd;
        }}
        th {{
            background-color: #2c5aa0;
            color: white;
        }}
        tr:nth-child(even) {{
            background-color: #f2f2f2;
        }}
        .status-pass {{ color: green; font-weight: bold; }}
        .status-fail {{ color: red; font-weight: bold; }}
        .status-error {{ color: orange; font-weight: bold; }}
        .timestamp {{
            text-align: right;
            color: #666;
            font-size: 12px;
            margin-top: 30px;
        }}
        .error-box {{
            color: red; 
            padding: 10px; 
            background: #ffe6e6; 
            border-radius: 5px;
            margin: 10px 0;
        }}
        .warning-box {{
            color: orange; 
            padding: 10px; 
            background: #fff3cd; 
            border-radius: 5px;
            margin: 10px 0;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">GOZNAK</div>
            <div class="subtitle">Compliance Check Tool</div>
            <h1>–û—Ç—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è</h1>
        </div>

        <div class="summary">
            <h2>–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div class="stats">
                <div class="stat-item stat-completed">
                    <div style="font-size: 24px; font-weight: bold;">{completed}</div>
                    <div>–£—Å–ø–µ—à–Ω–æ</div>
                </div>
                <div class="stat-item stat-failed">
                    <div style="font-size: 24px; font-weight: bold;">{failed}</div>
                    <div>–ù–µ—É–¥–∞—á–Ω–æ</div>
                </div>
                <div class="stat-item stat-errors">
                    <div style="font-size: 24px; font-weight: bold;">{errors}</div>
                    <div>–û—à–∏–±–∫–∏</div>
                </div>
            </div>
            <p><strong>–í—Å–µ–≥–æ –º–∞—à–∏–Ω:</strong> {total_hosts}</p>
            <p><strong>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong> {timestamp}</p>
        </div>
"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω–µ
    for i, host_result in enumerate(all_results):
        host = host_result['host']
        status = host_result['status']
        results = host_result.get('results', [])
        
        status_text = "‚úÖ –£–°–ü–ï–®–ù–û" if status == 'completed' else "‚ö†Ô∏è  –ù–ï–£–î–ê–ß–ù–û" if status == 'failed' else "‚ùå –û–®–ò–ë–ö–ê"
        
        html_content += f"""
        <button type="button" class="collapsible" onclick="toggleSection('host-{i}')">
            {status_text} | –ú–∞—à–∏–Ω–∞: {host}
        </button>
        <div id="host-{i}" class="collapsible-content">
"""
        
        if status == 'completed' and results:
            passed = sum(1 for r in results if r['status'] == 'PASS')
            failed = sum(1 for r in results if r['status'] == 'FAIL')
            html_content += f"""
            <div style="margin-bottom: 15px;">
                <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</strong> PASS: <span style="color: green">{passed}</span>, 
                FAIL: <span style="color: red">{failed}</span>
            </div>
            <table>
                <thead>
                    <tr>
                        <th>–ü—Ä–∞–≤–∏–ª–æ</th>
                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–û–∂–∏–¥–∞–µ–º–æ–µ</th>
                        <th>–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ</th>
                    </tr>
                </thead>
                <tbody>
            """
            
            for result in results:
                status_class = ""
                if result['status'] == 'PASS':
                    status_class = "status-pass"
                elif result['status'] == 'FAIL':
                    status_class = "status-fail"
                else:
                    status_class = "status-error"
                
                html_content += f"""
                    <tr>
                        <td>{result['id']}</td>
                        <td>{html.escape(str(result['name']))}</td>
                        <td class="{status_class}">{result['status']}</td>
                        <td>{html.escape(str(result.get('expected', 'N/A')))}</td>
                        <td>{html.escape(str(result.get('actual_display', result.get('actual', 'N/A'))))}</td>
                    </tr>
                """
            
            html_content += """
                </tbody>
            </table>
            """
        elif status == 'error':
            html_content += f"""
            <div class="error-box">
                <strong>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</strong> {html.escape(host_result.get('error', 'Unknown error'))}
            </div>
            """
        else:
            html_content += """
            <div class="warning-box">
                <strong>–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏</strong>
            </div>
            """
        
        html_content += """
        </div>
        """

    html_content += f"""
        <div class="timestamp">
            –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {timestamp}
        </div>

        <script>
            function toggleSection(id) {{
                var content = document.getElementById(id);
                var button = content.previousElementSibling;
                if (content.style.display === "block") {{
                    content.style.display = "none";
                    button.classList.remove("active");
                }} else {{
                    content.style.display = "block";
                    button.classList.add("active");
                }}
            }}
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–≤—É—é —Å–µ–∫—Ü–∏—é
            document.addEventListener('DOMContentLoaded', function() {{
                var firstSection = document.querySelector('.collapsible-content');
                if (firstSection) {{
                    firstSection.style.display = 'block';
                    firstSection.previousElementSibling.classList.add('active');
                }}
            }});
        </script>
    </div>
</body>
</html>
"""

    with open(filename, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    return filename

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    try:
        print_banner()
        
        # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ö–æ—Å—Ç–æ–≤
        console.print("[bold cyan]–í–í–û–î –°–ü–ò–°–ö–ê –ú–ê–®–ò–ù[/bold cyan]")
        console.print("[italic]–£–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å–∞ –∏–ª–∏ hostname —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é[/italic]")
        console.print("[italic]–ü—Ä–∏–º–µ—Ä: 192.168.1.10, 192.168.1.11, server01.domain.com[/italic]")
        
        hosts_input = console.input("\n‚û§ [cyan]–ú–∞—à–∏–Ω—ã: [/cyan]").strip()
        hosts = [host.strip() for host in hosts_input.split(',') if host.strip()]
        
        if not hosts:
            console.print("[red]‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω—ã![/red]")
            return
        
        # –ó–∞–ø—Ä–æ—Å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        console.print(f"\n[cyan]üìä –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–∞—à–∏–Ω: {len(hosts)}[/cyan]")
        username = console.input("‚û§ [cyan]üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: [/cyan]").strip()
        if not username:
            console.print("[red]‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º![/red]")
            return
            
        password = getpass.getpass("‚û§ üîí –ü–∞—Ä–æ–ª—å: ")
        if not password:
            console.print("[red]‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º![/red]")
            return
        
        rules_file = "compliance_rules/linux.yaml"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤
        all_results = []
        console.print(f"\n[bold yellow]üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–í–ï–†–ö–£...[/bold yellow]")
        
        for i, host in enumerate(hosts, 1):
            console.print(f"\n[bold green]üîç [{i}/{len(hosts)}] –ü—Ä–æ–≤–µ—Ä–∫–∞ {host}[/bold green]")
            console.print("[italic]–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...[/italic]")
            
            try:
                results = run_linux_audit(host, username, password, rules_file)
                
                if results:
                    passed = sum(1 for r in results if r['status'] == 'PASS')
                    failed = sum(1 for r in results if r['status'] == 'FAIL')
                    errors = sum(1 for r in results if r['status'] == 'ERROR')
                    
                    all_results.append({
                        "host": host, 
                        "results": results, 
                        "status": "completed",
                        "summary": {"passed": passed, "failed": failed, "errors": errors}
                    })
                    
                    console.print(f"[green]‚úÖ –£—Å–ø–µ—à–Ω–æ! PASS: {passed}, FAIL: {failed}, ERROR: {errors}[/green]")
                    print_results_table(host, results)
                else:
                    all_results.append({
                        "host": host, 
                        "results": [], 
                        "status": "failed", 
                        "error": "No results from audit"
                    })
                    console.print("[yellow]‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤[/yellow]")
                    
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
                all_results.append({
                    "host": host, 
                    "results": [], 
                    "status": "error", 
                    "error": error_msg
                })
                console.print(f"[red]‚ùå {error_msg}[/red]")
        
        # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print_summary_statistics(all_results)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        save_summary_report(all_results)
            
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"[red]üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        import traceback
        traceback.print_exc()
    finally:
        input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

    
if __name__ == "__main__":
    main()